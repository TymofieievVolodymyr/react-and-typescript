{"data":{"site":{"siteMetadata":{"title":"React && TypeScript","subtitle":"Build more reliable, type-safe applications","description":"This is the description that will show up when people share as well as on search engines","keywords":["react","typescript","frontend masters"]}},"allMarkdownRemark":{"edges":[{"node":{"id":"14eae914-ad8a-5405-9dcb-7e999f5206cd","frontmatter":{"order":"10A","path":"/migration","title":"Migrating From JavaScript","section":"Appendix","description":"A collection of high-level tips about how to migrate your application from JavaScript to TypeScript."}}},{"node":{"id":"bae52581-efda-5457-952f-5cc69188eca0","frontmatter":{"order":"10B","path":"/types-versus-interfaces","title":"Types Versus Interfaces","section":"Appendix","description":"What are some of the differences between types and interfaces?"}}},{"node":{"id":"da1d78bb-4041-5bb6-93d5-e2b3cc5e82a0","frontmatter":{"order":"1A","path":"/welcome","title":"Welcome and Introduction","section":"Introduction","description":"Getting started and an introduction to TypeScript && React Workshop"}}},{"node":{"id":"ba0db5c9-2a66-5979-83a6-4012b9141c74","frontmatter":{"order":"1B","path":"/sales-pitch","title":"Why Use TypeScript? (A Sales Pitch)","section":"Introduction","description":"Getting started and an introduction to TypeScript && React Workshop"}}},{"node":{"id":"20cf6bc1-8226-5497-8e11-cdef78994dbd","frontmatter":{"order":"2A","path":"/the-most-basic-example","title":"The Very Basics","section":"TypeScript and React Fundamentals","description":"Let’s look at a very simple component and see what TypeScript gives us out of the box."}}},{"node":{"id":"e57bf558-83f6-529c-8a3d-e501c81db98e","frontmatter":{"order":"2B","path":"/refactoring-from-proptypes","title":"Refactoring from PropTypes","section":"TypeScript and React Fundamentals","description":"With TypeScript, we no longer need PropTypes to provide safety in our application."}}},{"node":{"id":"5755bb61-d645-5a75-91d0-a2a7637e938f","frontmatter":{"order":"2C","path":"/commonly-used-props","title":"Commonly-Used Props","section":"TypeScript and React Fundamentals","description":"A tour of some of the types that you’ll commonly use in your React applications."}}},{"node":{"id":"dbc9516f-3b6c-5f40-9fa3-be952e8af0c7","frontmatter":{"order":"2D","path":"/typing-children","title":"Typing Children","section":"TypeScript and React Fundamentals","description":"In which we determine what type to use for child components in React."}}},{"node":{"id":"110a5448-cf22-5243-8702-7925bc84ddc4","frontmatter":{"order":"2E","path":"/typing-children-solution","title":"Typing Children (Solution)","section":"TypeScript and React Fundamentals","description":"In which we determine what type to use for child components in React."}}},{"node":{"id":"e807f841-d78b-5ce9-875f-6ec5dbaf8632","frontmatter":{"order":"2F","path":"/typing-styling","title":"Typing Styling","section":"TypeScript and React Fundamentals","description":"A quick look at how to type inline CSS styling with TypeScript"}}},{"node":{"id":"31196eef-b5bb-56b9-bd2f-2338fe66fe6c","frontmatter":{"order":"3A","path":"/use-state","title":"useState Hook","section":"Typing with Hooks and State Management","description":"An introduction to typing useState in React."}}},{"node":{"id":"12a681b2-ab6b-5add-a803-d81431b5b8ba","frontmatter":{"order":"3B","path":"/use-state-no-default-value","title":"Setting State without a Default Value","section":"Typing with Hooks and State Management","description":"How to handle the case where we don’t have a default value for use with type inference. "}}},{"node":{"id":"6486db82-581a-5fa6-8df5-3429914d6b9b","frontmatter":{"order":"3C","path":"/use-effect","title":"useEffect","section":"Typing with Hooks and State Management","description":"Catching omissions with the useEffect hook using TypeScript."}}},{"node":{"id":"01a727ce-ff85-5488-965d-d1551902f882","frontmatter":{"order":"3D","path":"/forms-and-events","title":"Forms and Events","section":"Typing with Hooks and State Management","description":"Adding type safety to forms and events."}}},{"node":{"id":"1adf823b-ea3b-5973-8291-f2849f8cd78b","frontmatter":{"order":"3E","path":"/class-based-components","title":"Typing Class-based Components","section":"Typing with Hooks and State Management","description":"A brief look at how we can add type safety to class-based React cmponents."}}},{"node":{"id":"cfd4dd70-bc95-5fa5-aada-a6198a41943b","frontmatter":{"order":"3E","path":"/dog-facts","title":"Exercise: Dog Facts","section":"Typing with Hooks and State Management","description":"Adding type safety to forms and events."}}},{"node":{"id":"be74646d-dcb6-5ff8-b3b1-2a2ce5cc3571","frontmatter":{"order":"4A","path":"/reducers","title":"Typing Reducers","section":"Working with Reducers","description":"Using TypeScript beyond basic state management."}}},{"node":{"id":"05080a44-4ae9-50b2-b1c6-2611585e3b39","frontmatter":{"order":"4B","path":"/reducers-exercise","title":"Reducers (Exercise)","section":"Working with Reducers","description":"Add type-safety to a reducer in a React application with TypeScript."}}},{"node":{"id":"d0fef099-7772-5cfc-8da1-db244d4d5638","frontmatter":{"order":"4C","path":"/reducers-solution","title":"Reducers (Solution)","section":"Working with Reducers","description":"Add type-safety to a reducer in a React application with TypeScript."}}},{"node":{"id":"cc1769de-66be-5825-bd5b-194a4ca9d4f7","frontmatter":{"order":"5A","path":"/passing-dipatch","title":"Prologue: Passing Dispatch as a Props","section":"A Color Swatch and the Context API","description":"Getting started with a simple color swatch application."}}},{"node":{"id":"03e8fa24-3b17-5627-b512-3e124f8aea45","frontmatter":{"order":"5B","path":"/context-api","title":"The Context API","section":"A Color Swatch and the Context API","description":"Get your hands dirty with the Context API and TypeScript."}}},{"node":{"id":"db110a3a-889f-50af-b990-322b6c3f3be8","frontmatter":{"order":"5C","path":"/context-with-reducer","title":"The Context API with State Management","section":"A Color Swatch and the Context API","description":"Hooking up our Context API with our reducer."}}},{"node":{"id":"fd38c4d5-2ef0-56b3-a7ef-8603df628d0c","frontmatter":{"order":"5D","path":"/refactoring-color-inputs","title":"Refactoring the Color Inputs","section":"A Color Swatch and the Context API","description":"Let's DRY out our inputs?"}}},{"node":{"id":"a167f8b5-2e7b-53af-8e41-16f88789f310","frontmatter":{"order":"6A","path":"/generics","title":"Working with Generics","section":"Helpful TypeScript Concepts","description":"A gentle tour of what generics are in TypeScript and how they work."}}},{"node":{"id":"fadd9857-2daf-5601-bd90-9aefa847d1e0","frontmatter":{"order":"6B","path":"/utility-types","title":"A Tour of Utility Types in React","section":"Helpful TypeScript Concepts","description":"A quick rundown of some of the built-in type helpers and whatnot."}}},{"node":{"id":"b6bfa52e-486b-59a8-aa6f-1808852f8716","frontmatter":{"order":"6C","path":"/utility-types-character-cards","title":"Refactoring the Character Cards with Utility Types","section":"Helpful TypeScript Concepts","description":"A quick rundown of some of the built-in type helpers and whatnot."}}},{"node":{"id":"a2385c7f-49bf-560c-a5c9-4c6662a465c4","frontmatter":{"order":"6D","path":"/utility-types-exercise","title":"Utility Types (Exercise)","section":"Helpful TypeScript Concepts","description":"An exercise for getting comfortable with utility types in TypeScript."}}},{"node":{"id":"f5438b4e-c742-5137-8526-e061fd9d6b5b","frontmatter":{"order":"6E","path":"/utility-types-solution","title":"Utility Types (Solution)","section":"Helpful TypeScript Concepts","description":"An exercise for getting comfortable with utility types in TypeScript."}}},{"node":{"id":"69f42830-d3d1-5204-bee0-f88ed5d2f904","frontmatter":{"order":"6F","path":"/type-template-literals","title":"Type Template Literals","section":"Helpful TypeScript Concepts","description":"Using type template liberals to dynamically create types."}}},{"node":{"id":"b068b66b-ee4b-5187-a72f-bb6a4cc3b404","frontmatter":{"order":"6G","path":"/type-template-literals-refactoring-adjustment-actions","title":"Type Template Literals: Refactoring Our Color Adjustment Actions","section":"Helpful TypeScript Concepts","description":"Using type template literals to dynamically create types."}}},{"node":{"id":"d873303c-914f-50a9-b726-004bce9cdc68","frontmatter":{"order":"7A","path":"/wrapping-elements","title":"Wrapping HTML Elements","section":"Component Patterns: Basic","description":"How to wrap HTML elements and take advantage of all of their type properties."}}},{"node":{"id":"763b9ccd-88bc-5afb-9dac-80c2d5ca0575","frontmatter":{"order":"7B","path":"/wrapping-components","title":"Wrapping Components","section":"Component Patterns: Basic","description":"A look at how to wrap other components and take advantage of their type properties."}}},{"node":{"id":"848e56ad-143e-549d-8ad1-9b61496ed35b","frontmatter":{"order":"7C","path":"/omit","title":"Omitting Props from a Type","section":"Component Patterns: Basic","description":"Omitting props from a type so that we can use our own."}}},{"node":{"id":"60506c21-efaf-5b7e-a1bb-71113c91e60a","frontmatter":{"order":"8A","path":"/higher-order-components","title":"Higher Order Components with TypeScript","section":"Higher Order Components","description":"Implementing the higher-order component pattern with TypeScript."}}},{"node":{"id":"ae50c11e-fe08-5b68-adc8-58d23d3e36d6","frontmatter":{"order":"8B","path":"/higher-order-components-exercise","title":"Higher Order Components with TypeScript","section":"Higher Order Components","description":"Implementing the higher-order component pattern with TypeScript."}}},{"node":{"id":"2f1303af-8cdf-5bf3-bb67-122e56eb0dad","frontmatter":{"order":"8C","path":"/higher-order-components-solution","title":"Higher Order Components (Solution)","section":"Higher Order Components","description":"Implementing the higher-order component pattern with TypeScript."}}},{"node":{"id":"5edeba5f-1344-51e2-97e0-eb576a3ed557","frontmatter":{"order":"99A","path":"/context-exercise","title":"OLD: Context API (Exercise)","section":"Deprecated","description":"Get your hands dirty with the Context API and TypeScript."}}},{"node":{"id":"c78d0b75-94b6-5130-9509-2bae4b4d5d48","frontmatter":{"order":"99A","path":"/context-solution","title":"OLD Context API Solution","section":"Deprecated","description":"Refactoring the Context API"}}},{"node":{"id":"43da2755-410f-5455-9994-835c73efca64","frontmatter":{"order":"99B","path":"/wrapping-an-element","title":"Wrapping and Element","section":"Unfiled","description":"I don't like reinventing the wheel with built-in components"}}},{"node":{"id":"52296ff9-7a8b-5c14-b5a9-bb1802add9e9","frontmatter":{"order":"9A","path":"/limiting-props","title":"Limiting Props a Component Can Take Based on Other Props","section":"Component Patterns: Advanced","description":"An investigation into how we can limit which combinations of properties can be used with a component."}}},{"node":{"id":"536049d6-38f7-5834-90b8-c1bca584a379","frontmatter":{"order":"9B","path":"/polymorphic-components","title":"Polymorphic Components with TypeScript","section":"Component Patterns: Advanced","description":"Typing Polymorphic components with TypeScript."}}},{"node":{"id":"9e98ea30-d7e4-5285-81c9-b35521e25432","frontmatter":{"order":"9C","path":"/overloads","title":"Function Overloads","section":"Component Patterns: Advanced","description":"A brief look at function overloads in TypeScript."}}},{"node":{"id":"98b08d84-fec5-5d37-af78-9832ac5b0d40","frontmatter":{"order":"9D","path":"/dependent-props","title":"Demanding Props Based on Other Props","section":"Component Patterns: Advanced","description":"A look at how to implement props that rely on other props being set."}}}]}}}